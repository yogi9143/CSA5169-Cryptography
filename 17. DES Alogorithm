#include <stdio.h>
#include <stdint.h>
#include <string.h>

// Initial Permutation (IP) table
const int IP[] = {58, 50, 42, 34, 26, 18, 10, 2,
                  60, 52, 44, 36, 28, 20, 12, 4,
                  62, 54, 46, 38, 30, 22, 14, 6,
                  64, 56, 48, 40, 32, 24, 16, 8,
                  57, 49, 41, 33, 25, 17, 9, 1,
                  59, 51, 43, 35, 27, 19, 11, 3,
                  61, 53, 45, 37, 29, 21, 13, 5,
                  63, 55, 47, 39, 31, 23, 15, 7};

// Final Permutation (FP) table
const int FP[] = {40, 8, 48, 16, 56, 24, 64, 32,
                  39, 7, 47, 15, 55, 23, 63, 31,
                  38, 6, 46, 14, 54, 22, 62, 30,
                  37, 5, 45, 13, 53, 21, 61, 29,
                  36, 4, 44, 12, 52, 20, 60, 28,
                  35, 3, 43, 11, 51, 19, 59, 27,
                  34, 2, 42, 10, 50, 18, 58, 26,
                  33, 1, 41, 9, 49, 17, 57, 25};

// Expansion table for expanding 32-bit R to 48-bit
const int E[] = {32, 1, 2, 3, 4, 5,
                 4, 5, 6, 7, 8, 9,
                 8, 9, 10, 11, 12, 13,
                 12, 13, 14, 15, 16, 17,
                 16, 17, 18, 19, 20, 21,
                 20, 21, 22, 23, 24, 25,
                 24, 25, 26, 27, 28, 29,
                 28, 29, 30, 31, 32, 1};

// Permutation table after S-box substitution
const int P[] = {16, 7, 20, 21,
                 29, 12, 28, 17,
                 1, 15, 23, 26,
                 5, 18, 31, 10,
                 2, 8, 24, 14,
                 32, 27, 3, 9,
                 19, 13, 30, 6,
                 22, 11, 4, 25};

// Permutation choice 1 table (PC-1)
const int PC1[] = {57, 49, 41, 33, 25, 17, 9,
                   1, 58, 50, 42, 34, 26, 18,
                   10, 2, 59, 51, 43, 35, 27,
                   19, 11, 3, 60, 52, 44, 36,
                   63, 55, 47, 39, 31, 23, 15,
                   7, 62, 54, 46, 38, 30, 22,
                   14, 6, 61, 53, 45, 37, 29,
                   21, 13, 5, 28, 20, 12, 4};

// Permutation choice 2 table (PC-2)
const int PC2[] = {14, 17, 11, 24, 1, 5,
                   3, 28, 15, 6, 21, 10,
                   23, 19, 12, 4, 26, 8,
                   16, 7, 27, 20, 13, 2,
                   41, 52, 31, 37, 47, 55,
                   30, 40, 51, 45, 33, 48,
                   44, 49, 39, 56, 34, 53,
                   46, 42, 50, 36, 29, 32};

// Number of shifts for each round of key schedule
const int SHIFT_COUNT[] = {1, 1, 2, 2, 2, 2, 2, 2,
                           1, 2, 2, 2, 2, 2, 2, 1};

// Initial permutation of the key (PC-1)
void permuteKey(const uint8_t *key, uint8_t *permutedKey) {
    for (int i = 0; i < 56; ++i) {
        int bit_position = PC1[i] - 1;
        int byte_position = bit_position / 8;
        int bit_mask = 1 << (7 - (bit_position % 8));
        permutedKey[i] = (key[byte_position] & bit_mask) ? 1 : 0;
    }
}

// Circular left shift for 28-bit key halves
void circularLeftShift(uint8_t *key, int bits) {
    int bytes = bits / 8;
    int shift = bits % 8;
    uint8_t carry = 0;
    
    for (int i = 0; i < bytes; ++i) {
        uint8_t temp = key[i];
        key[i] <<= shift;
        key[i] |= carry;
        carry = (temp >> (8 - shift)) & ((1 << shift) - 1);
    }
    
    if (bytes == 4 && bits == 2) {
        key[3] <<= shift;
        key[3] |= carry;
    }
}

// Generate round keys from the original key
void generateRoundKeys(const uint8_t *key, uint8_t roundKeys[][6]) {
    uint8_t permutedKey[56];
    permuteKey(key, permutedKey);
    
    uint8_t C[4], D[4];
    // Split permutedKey into C and D
    for (int i = 0; i < 28; ++i) {
        C[i / 8] |= (permutedKey[i] << (7 - (i % 8)));
    }
    for (int i = 28; i < 56; ++i) {
        D[(i - 28) / 8] |= (permutedKey[i] << (7 - ((i - 28) % 8)));
    }
    
    // Generate round keys K1 to K16
    for (int round = 0; round < 16; ++round) {
        // Perform circular left shifts on C and D
        circularLeftShift(C, SHIFT_COUNT[round]);
        circularLeftShift(D, SHIFT_COUNT[round]);
        
        // Combine C and D
        for (int i = 0; i < 28; ++i) {
            permutedKey[i] = (C[i / 8] >> (7 - (i % 8))) & 1;
        }
        for (int i = 28; i < 56; ++i) {
            permutedKey[i] = (D[(i - 28) / 8] >> (7 - ((i - 28) % 8))) & 1;
        }
        
        // Apply permutation choice 2 (PC-2) to generate round key
        for (int i = 0; i < 48; ++i) {
            int bit_position = PC2[i] - 1;
            int byte_position = bit_position / 8;
            int bit_mask = 1 << (7 - (bit_position % 8));
            roundKeys[round][i / 8] |= (permutedKey[bit_position] << (7 - (i % 8)));
        }
    }
}

// Initial permutation of the plaintext
void initialPermutation(const uint8_t *plaintext, uint8_t *permutedText) {
    for (int i = 0; i < 64; ++i) {
        int bit_position = IP[i]
